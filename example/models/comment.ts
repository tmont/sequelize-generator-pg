/* tslint:disable */
/* eslint:disable */
// autogenerated by sequelize-pg-generator@0.0.1

import Sequelize = require('sequelize');
import { DataTypes, DefineAttributes, DefineOptions } from 'sequelize';
import { Author } from './author';
import { Post } from './post';

export interface CommentAttributes {
	id: number
	postId: number
	content: string
	createdAt: Date
	updatedAt: Date
	authorId: number
}

export interface Comment extends Sequelize.Instance<CommentAttributes>, CommentAttributes {
	author: Author | null
	post: Post | null
}

export default (
	sequelize: Sequelize.Sequelize,
	tableOptions?: DefineOptions<Comment>
): Sequelize.Model<Comment, CommentAttributes> => {
	const DataTypes: DataTypes = sequelize.Sequelize;

	tableOptions = tableOptions || {};
	tableOptions.freezeTableName = true;
	tableOptions.tableName = 'comment';

	const columns: DefineAttributes = {
		id: {
			field: 'id',
			type: DataTypes.INTEGER /* integer */,
			primaryKey: true,
			allowNull: false,
			autoIncrement: true
		},
		postId: {
			field: 'post_id',
			type: DataTypes.INTEGER /* integer */,
			primaryKey: false,
			allowNull: false,
			autoIncrement: false
		},
		content: {
			field: 'content',
			type: DataTypes.TEXT /* text */,
			primaryKey: false,
			allowNull: false,
			autoIncrement: false
		},
		createdAt: {
			field: 'created_at',
			type: DataTypes.DATE /* timestamp with time zone */,
			primaryKey: false,
			allowNull: false,
			autoIncrement: false,
			defaultValue: DataTypes.NOW
		},
		updatedAt: {
			field: 'updated_at',
			type: DataTypes.DATE /* timestamp with time zone */,
			primaryKey: false,
			allowNull: true,
			autoIncrement: false
		},
		authorId: {
			field: 'author_id',
			type: DataTypes.INTEGER /* integer */,
			primaryKey: false,
			allowNull: false,
			autoIncrement: false
		}
	};

	return sequelize.define<Comment, CommentAttributes>(
		'Comment',
		columns,
		tableOptions
	);
};
